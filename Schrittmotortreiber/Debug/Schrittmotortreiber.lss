
Schrittmotortreiber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d0  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008c  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000eb  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015c  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000020  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	13 d0       	rcall	.+38     	; 0x56 <main>
  30:	22 c0       	rjmp	.+68     	; 0x76 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <ADC_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>

void ADC_Init(void)
{
  ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE);     // Prescaler and Free Running Mode
  34:	87 e2       	ldi	r24, 0x27	; 39
  36:	86 b9       	out	0x06, r24	; 6
  ADCSRB = (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
  38:	13 b8       	out	0x03, r1	; 3
  ADMUX = (ADMUX & ~(0x1F)) | (3 & 0x1F); //AD Channel select
  3a:	87 b1       	in	r24, 0x07	; 7
  3c:	80 7e       	andi	r24, 0xE0	; 224
  3e:	83 60       	ori	r24, 0x03	; 3
  40:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1<<ADEN);                    //activate ADC 
  42:	37 9a       	sbi	0x06, 7	; 6
  ADCSRA |= (1<<ADSC);                    //one inintial ADC-conversion 
  44:	36 9a       	sbi	0x06, 6	; 6
  46:	08 95       	ret

00000048 <setTimerFromADC>:
}

void setTimerFromADC() {	
	//Write 10-Bit Timer register with 16-Bit AD-Value ADCW
	TC1H = ADCW>>8;
  48:	84 b1       	in	r24, 0x04	; 4
  4a:	95 b1       	in	r25, 0x05	; 5
  4c:	95 bd       	out	0x25, r25	; 37
	OCR1C = ADCW;
  4e:	84 b1       	in	r24, 0x04	; 4
  50:	95 b1       	in	r25, 0x05	; 5
  52:	8b bd       	out	0x2b, r24	; 43
  54:	08 95       	ret

00000056 <main>:


int main(void)
{

	DDRB = (1<<DDB1); //Set Port B1 to OUTPUT
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	87 bb       	out	0x17, r24	; 23
	PORTA = (1<<PORTA0)	; //Activate Stepper-Driver-IC
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	8b bb       	out	0x1b, r24	; 27
	
	// PWM Timer Setup
	TCCR1A = (1<<COM1A0);
  5e:	90 e4       	ldi	r25, 0x40	; 64
  60:	90 bf       	out	0x30, r25	; 48
	TCCR1B = (1<<CS11) | (1<<CS10); //Prescaler = CK/8
  62:	93 e0       	ldi	r25, 0x03	; 3
  64:	9f bd       	out	0x2f, r25	; 47
	//Timer-TOP-Registers (initial values, irrelevant for later use)
	TC1H = 0x06;
  66:	96 e0       	ldi	r25, 0x06	; 6
  68:	95 bd       	out	0x25, r25	; 37
	OCR1C  = 0x1;
  6a:	8b bd       	out	0x2b, r24	; 43

	ADC_Init();  
  6c:	e3 df       	rcall	.-58     	; 0x34 <ADC_Init>
	
	// clear Timer (not necessary in this case)
	TC1H = 0;
  6e:	15 bc       	out	0x25, r1	; 37
	TCNT1 = 0;	
  70:	1e bc       	out	0x2e, r1	; 46

	
	while(1)
	{	
		setTimerFromADC();		
  72:	ea df       	rcall	.-44     	; 0x48 <setTimerFromADC>
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x1c>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
